{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "313268e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler \n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5cd810bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset=pd.read_csv(\"prep.csv\",index_col=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c4baee07",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2=dataset\n",
    "\n",
    "df2 = pd.get_dummies(df2, drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4ed34c6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bp</th>\n",
       "      <th>al</th>\n",
       "      <th>su</th>\n",
       "      <th>bgr</th>\n",
       "      <th>bu</th>\n",
       "      <th>sc</th>\n",
       "      <th>sod</th>\n",
       "      <th>pot</th>\n",
       "      <th>hrmo</th>\n",
       "      <th>...</th>\n",
       "      <th>pc_normal</th>\n",
       "      <th>pcc_present</th>\n",
       "      <th>ba_present</th>\n",
       "      <th>htn_yes</th>\n",
       "      <th>dm_yes</th>\n",
       "      <th>cad_yes</th>\n",
       "      <th>appet_yes</th>\n",
       "      <th>pe_yes</th>\n",
       "      <th>ane_yes</th>\n",
       "      <th>classification_yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>76.459948</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>148.112676</td>\n",
       "      <td>57.482105</td>\n",
       "      <td>3.077356</td>\n",
       "      <td>137.528754</td>\n",
       "      <td>4.627244</td>\n",
       "      <td>12.518156</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>76.459948</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>148.112676</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>0.700000</td>\n",
       "      <td>137.528754</td>\n",
       "      <td>4.627244</td>\n",
       "      <td>10.700000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>76.459948</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>138.000000</td>\n",
       "      <td>4.400000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>76.459948</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>148.112676</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>0.700000</td>\n",
       "      <td>138.000000</td>\n",
       "      <td>3.200000</td>\n",
       "      <td>8.100000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>148.112676</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>137.528754</td>\n",
       "      <td>4.627244</td>\n",
       "      <td>11.800000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>394</th>\n",
       "      <td>51.492308</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>219.000000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>1.300000</td>\n",
       "      <td>139.000000</td>\n",
       "      <td>3.700000</td>\n",
       "      <td>12.500000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>395</th>\n",
       "      <td>51.492308</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>68.000000</td>\n",
       "      <td>2.800000</td>\n",
       "      <td>137.528754</td>\n",
       "      <td>4.627244</td>\n",
       "      <td>8.700000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396</th>\n",
       "      <td>51.492308</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>110.000000</td>\n",
       "      <td>115.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>134.000000</td>\n",
       "      <td>2.700000</td>\n",
       "      <td>9.100000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>51.492308</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>207.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>6.800000</td>\n",
       "      <td>142.000000</td>\n",
       "      <td>5.500000</td>\n",
       "      <td>8.500000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>51.492308</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>49.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>140.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>16.300000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>399 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           age         bp   al   su         bgr          bu        sc  \\\n",
       "0     2.000000  76.459948  3.0  0.0  148.112676   57.482105  3.077356   \n",
       "1     3.000000  76.459948  2.0  0.0  148.112676   22.000000  0.700000   \n",
       "2     4.000000  76.459948  1.0  0.0   99.000000   23.000000  0.600000   \n",
       "3     5.000000  76.459948  1.0  0.0  148.112676   16.000000  0.700000   \n",
       "4     5.000000  50.000000  0.0  0.0  148.112676   25.000000  0.600000   \n",
       "..         ...        ...  ...  ...         ...         ...       ...   \n",
       "394  51.492308  70.000000  0.0  0.0  219.000000   36.000000  1.300000   \n",
       "395  51.492308  70.000000  0.0  2.0  220.000000   68.000000  2.800000   \n",
       "396  51.492308  70.000000  3.0  0.0  110.000000  115.000000  6.000000   \n",
       "397  51.492308  90.000000  0.0  0.0  207.000000   80.000000  6.800000   \n",
       "398  51.492308  80.000000  0.0  0.0  100.000000   49.000000  1.000000   \n",
       "\n",
       "            sod       pot       hrmo  ...  pc_normal  pcc_present  ba_present  \\\n",
       "0    137.528754  4.627244  12.518156  ...          0            0           0   \n",
       "1    137.528754  4.627244  10.700000  ...          1            0           0   \n",
       "2    138.000000  4.400000  12.000000  ...          1            0           0   \n",
       "3    138.000000  3.200000   8.100000  ...          1            0           0   \n",
       "4    137.528754  4.627244  11.800000  ...          1            0           0   \n",
       "..          ...       ...        ...  ...        ...          ...         ...   \n",
       "394  139.000000  3.700000  12.500000  ...          1            0           0   \n",
       "395  137.528754  4.627244   8.700000  ...          1            0           0   \n",
       "396  134.000000  2.700000   9.100000  ...          1            0           0   \n",
       "397  142.000000  5.500000   8.500000  ...          1            0           0   \n",
       "398  140.000000  5.000000  16.300000  ...          1            0           0   \n",
       "\n",
       "     htn_yes  dm_yes  cad_yes  appet_yes  pe_yes  ane_yes  classification_yes  \n",
       "0          0       0        0          1       1        0                   1  \n",
       "1          0       0        0          1       0        0                   1  \n",
       "2          0       0        0          1       0        0                   1  \n",
       "3          0       0        0          1       0        1                   1  \n",
       "4          0       0        0          1       0        0                   1  \n",
       "..       ...     ...      ...        ...     ...      ...                 ...  \n",
       "394        0       0        0          1       0        0                   1  \n",
       "395        1       1        0          1       0        1                   1  \n",
       "396        1       1        0          0       0        0                   1  \n",
       "397        1       1        0          1       0        1                   1  \n",
       "398        0       0        0          1       0        0                   0  \n",
       "\n",
       "[399 rows x 28 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3bf97aa9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(399, 28)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3aef10ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "indep_X=df2.drop('classification_yes', axis=1)#drop output column separately using drop_function\n",
    "dep_Y=df2['classification_yes']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bd63bdc7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bp</th>\n",
       "      <th>al</th>\n",
       "      <th>su</th>\n",
       "      <th>bgr</th>\n",
       "      <th>bu</th>\n",
       "      <th>sc</th>\n",
       "      <th>sod</th>\n",
       "      <th>pot</th>\n",
       "      <th>hrmo</th>\n",
       "      <th>...</th>\n",
       "      <th>rbc_normal</th>\n",
       "      <th>pc_normal</th>\n",
       "      <th>pcc_present</th>\n",
       "      <th>ba_present</th>\n",
       "      <th>htn_yes</th>\n",
       "      <th>dm_yes</th>\n",
       "      <th>cad_yes</th>\n",
       "      <th>appet_yes</th>\n",
       "      <th>pe_yes</th>\n",
       "      <th>ane_yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>76.459948</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>148.112676</td>\n",
       "      <td>57.482105</td>\n",
       "      <td>3.077356</td>\n",
       "      <td>137.528754</td>\n",
       "      <td>4.627244</td>\n",
       "      <td>12.518156</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>76.459948</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>148.112676</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>0.700000</td>\n",
       "      <td>137.528754</td>\n",
       "      <td>4.627244</td>\n",
       "      <td>10.700000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>76.459948</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>138.000000</td>\n",
       "      <td>4.400000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>76.459948</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>148.112676</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>0.700000</td>\n",
       "      <td>138.000000</td>\n",
       "      <td>3.200000</td>\n",
       "      <td>8.100000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>148.112676</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>137.528754</td>\n",
       "      <td>4.627244</td>\n",
       "      <td>11.800000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>394</th>\n",
       "      <td>51.492308</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>219.000000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>1.300000</td>\n",
       "      <td>139.000000</td>\n",
       "      <td>3.700000</td>\n",
       "      <td>12.500000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>395</th>\n",
       "      <td>51.492308</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>68.000000</td>\n",
       "      <td>2.800000</td>\n",
       "      <td>137.528754</td>\n",
       "      <td>4.627244</td>\n",
       "      <td>8.700000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396</th>\n",
       "      <td>51.492308</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>110.000000</td>\n",
       "      <td>115.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>134.000000</td>\n",
       "      <td>2.700000</td>\n",
       "      <td>9.100000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>51.492308</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>207.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>6.800000</td>\n",
       "      <td>142.000000</td>\n",
       "      <td>5.500000</td>\n",
       "      <td>8.500000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>51.492308</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>49.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>140.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>16.300000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>399 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           age         bp   al   su         bgr          bu        sc  \\\n",
       "0     2.000000  76.459948  3.0  0.0  148.112676   57.482105  3.077356   \n",
       "1     3.000000  76.459948  2.0  0.0  148.112676   22.000000  0.700000   \n",
       "2     4.000000  76.459948  1.0  0.0   99.000000   23.000000  0.600000   \n",
       "3     5.000000  76.459948  1.0  0.0  148.112676   16.000000  0.700000   \n",
       "4     5.000000  50.000000  0.0  0.0  148.112676   25.000000  0.600000   \n",
       "..         ...        ...  ...  ...         ...         ...       ...   \n",
       "394  51.492308  70.000000  0.0  0.0  219.000000   36.000000  1.300000   \n",
       "395  51.492308  70.000000  0.0  2.0  220.000000   68.000000  2.800000   \n",
       "396  51.492308  70.000000  3.0  0.0  110.000000  115.000000  6.000000   \n",
       "397  51.492308  90.000000  0.0  0.0  207.000000   80.000000  6.800000   \n",
       "398  51.492308  80.000000  0.0  0.0  100.000000   49.000000  1.000000   \n",
       "\n",
       "            sod       pot       hrmo  ...  rbc_normal  pc_normal  pcc_present  \\\n",
       "0    137.528754  4.627244  12.518156  ...           1          0            0   \n",
       "1    137.528754  4.627244  10.700000  ...           1          1            0   \n",
       "2    138.000000  4.400000  12.000000  ...           1          1            0   \n",
       "3    138.000000  3.200000   8.100000  ...           1          1            0   \n",
       "4    137.528754  4.627244  11.800000  ...           1          1            0   \n",
       "..          ...       ...        ...  ...         ...        ...          ...   \n",
       "394  139.000000  3.700000  12.500000  ...           1          1            0   \n",
       "395  137.528754  4.627244   8.700000  ...           1          1            0   \n",
       "396  134.000000  2.700000   9.100000  ...           1          1            0   \n",
       "397  142.000000  5.500000   8.500000  ...           1          1            0   \n",
       "398  140.000000  5.000000  16.300000  ...           1          1            0   \n",
       "\n",
       "     ba_present  htn_yes  dm_yes  cad_yes  appet_yes  pe_yes  ane_yes  \n",
       "0             0        0       0        0          1       1        0  \n",
       "1             0        0       0        0          1       0        0  \n",
       "2             0        0       0        0          1       0        0  \n",
       "3             0        0       0        0          1       0        1  \n",
       "4             0        0       0        0          1       0        0  \n",
       "..          ...      ...     ...      ...        ...     ...      ...  \n",
       "394           0        0       0        0          1       0        0  \n",
       "395           0        1       1        0          1       0        1  \n",
       "396           0        1       1        0          0       0        0  \n",
       "397           0        1       1        0          1       0        1  \n",
       "398           0        0       0        0          1       0        0  \n",
       "\n",
       "[399 rows x 27 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "indep_X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c9cd75e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      1\n",
       "1      1\n",
       "2      1\n",
       "3      1\n",
       "4      1\n",
       "      ..\n",
       "394    1\n",
       "395    1\n",
       "396    1\n",
       "397    1\n",
       "398    0\n",
       "Name: classification_yes, Length: 399, dtype: uint8"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dep_Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7bdd7308",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(indep_X, dep_Y, test_size=0.2, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4cdd677b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a StandardScaler \n",
    "scaler = StandardScaler()\n",
    "# Scale the data\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2e6993a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#log_model=LogisticRegression(solver='lbfgs')\n",
    "#RF=RandomForestClassifier(n_estimators=10, max_depth=None,min_samples_split=2, random_state=0)\n",
    "#DT=DecisionTreeClassifier(max_depth=None, min_samples_split=2,random_state=0)\n",
    "#SVM=SVC(kernel='linear',random_state=0)\n",
    "#SVM_NL=SVC(kernel='rbf',random_state=0) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "384f6f99",
   "metadata": {},
   "outputs": [],
   "source": [
    "rf_model=RandomForestClassifier(n_estimators=10, max_depth=None,min_samples_split=2, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d228d9b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "rf_model=rf_model.fit(X_train_scaled,y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "761e479d",
   "metadata": {},
   "source": [
    "## feature_importances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a7d17f7e",
   "metadata": {},
   "outputs": [],
   "source": [
    " #Retrieve feature importance scores make a list\n",
    "feature_importances =list(rf_model.feature_importances_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9f122d72",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.02345613569480969,\n",
       " 0.0026892262395733675,\n",
       " 0.08422140226242984,\n",
       " 0.0,\n",
       " 0.02396897676710053,\n",
       " 0.05375645339964211,\n",
       " 0.038197236196475366,\n",
       " 0.03991830099538806,\n",
       " 0.003057605595234331,\n",
       " 0.17997590656820436,\n",
       " 0.32466419079274234,\n",
       " 0.0035196268723462517,\n",
       " 0.12634883937934901,\n",
       " 0.001214775323686215,\n",
       " 0.01194996286463879,\n",
       " 0.01997970595763808,\n",
       " 0.0,\n",
       " 0.0014527439425983406,\n",
       " 0.004219886783939369,\n",
       " 0.0012572479116928802,\n",
       " 0.0,\n",
       " 0.03906111690683461,\n",
       " 0.00911379960537812,\n",
       " 0.0,\n",
       " 0.0012961940082590296,\n",
       " 0.0037567656849541316,\n",
       " 0.0029239002470853167]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_importances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ec103b7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pcv: 0.32466419079274234\n",
      "hrmo: 0.17997590656820436\n",
      "rc: 0.12634883937934901\n",
      "al: 0.08422140226242984\n",
      "bu: 0.05375645339964211\n",
      "sod: 0.03991830099538806\n",
      "htn_yes: 0.03906111690683461\n",
      "sc: 0.038197236196475366\n",
      "bgr: 0.02396897676710053\n",
      "age: 0.02345613569480969\n",
      "sg_d: 0.01997970595763808\n",
      "sg_c: 0.01194996286463879\n",
      "dm_yes: 0.00911379960537812\n",
      "pc_normal: 0.004219886783939369\n",
      "pe_yes: 0.0037567656849541316\n",
      "wc: 0.0035196268723462517\n",
      "pot: 0.003057605595234331\n",
      "ane_yes: 0.0029239002470853167\n",
      "bp: 0.0026892262395733675\n",
      "rbc_normal: 0.0014527439425983406\n",
      "appet_yes: 0.0012961940082590296\n",
      "pcc_present: 0.0012572479116928802\n",
      "sg_b: 0.001214775323686215\n",
      "su: 0.0\n",
      "sg_e: 0.0\n",
      "ba_present: 0.0\n",
      "cad_yes: 0.0\n"
     ]
    }
   ],
   "source": [
    "# Display feature importances in descending order\n",
    "feature_importances_sorted = sorted(zip(indep_X.columns, feature_importances), key=lambda x: x[1], reverse=True)\n",
    "\n",
    "for feature, importance in feature_importances_sorted:\n",
    "    print(f'{feature}: {importance}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4ffbacc0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract features and importance scores separately from the sorted list\n",
    "features_sorted, importance_scores_sorted = zip(*feature_importances_sorted)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c6755fda",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting feature importance\n",
    "plt.bar(features_sorted, importance_scores_sorted)\n",
    "plt.xlabel('Features')\n",
    "plt.ylabel('Importance Scores')\n",
    "plt.title('Feature Importance in Predicting Housing Prices')\n",
    "\n",
    "# Rotate x-axis labels for better readability\n",
    "plt.xticks(rotation=45)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "54525e9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Expalantions:\n",
    "\n",
    "#Certainly! The line zip(*feature_importances_sorted) is a way to \"unzip\" or transpose a list of tuples. Let me break it down:\n",
    "\n",
    "#feature_importances_sorted is a list of tuples, where each tuple contains a feature and its corresponding importance score. For example, it might look like this:\n",
    "\n",
    "#python:eg [('Feature1', 0.25), ('Feature2', 0.4), ('Feature3', 0.35)]\n",
    "#Now, zip(*feature_importances_sorted) is a special syntax in Python that is used to unpack the tuples in the opposite way they were packed. It essentially transposes the list of tuples. In this case, it transforms the above list into two separate lists:\n",
    "\n",
    "#('Feature1', 'Feature2', 'Feature3') - This becomes the list of feature names.\n",
    "#(0.25, 0.4, 0.35) - This becomes the list of corresponding importance scores.\n",
    "#So, zip(*feature_importances_sorted) is a concise way to separate the feature names and importance scores from the list of tuples. This is often used when you want to plot or analyze the data in a way that requires the features and their scores to be in separate lists.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a92b425d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def random(X_train_scaled,y_train):\n",
    "    \n",
    "    rf_model=RandomForestClassifier(n_estimators=10, max_depth=None,min_samples_split=2, random_state=0)\n",
    "    rf_model=rf_model.fit(X_train_scaled,y_train)\n",
    "    feature_importances =list(rf_model.feature_importances_)\n",
    "    feature_importances_sorted = sorted(zip(indep_X.columns, feature_importances), key=lambda x: x[1], reverse=True)\n",
    "\n",
    "    for feature, importance in feature_importances_sorted:\n",
    "        print(f'{feature}: {importance}')\n",
    "\n",
    "        features_sorted, importance_scores_sorted = zip(*feature_importances_sorted)\n",
    "        return  feature_importances , features_sorted, importance_scores_sorted "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c0f0ace8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.02345613569480969,\n",
       " 0.0026892262395733675,\n",
       " 0.08422140226242984,\n",
       " 0.0,\n",
       " 0.02396897676710053,\n",
       " 0.05375645339964211,\n",
       " 0.038197236196475366,\n",
       " 0.03991830099538806,\n",
       " 0.003057605595234331,\n",
       " 0.17997590656820436,\n",
       " 0.32466419079274234,\n",
       " 0.0035196268723462517,\n",
       " 0.12634883937934901,\n",
       " 0.001214775323686215,\n",
       " 0.01194996286463879,\n",
       " 0.01997970595763808,\n",
       " 0.0,\n",
       " 0.0014527439425983406,\n",
       " 0.004219886783939369,\n",
       " 0.0012572479116928802,\n",
       " 0.0,\n",
       " 0.03906111690683461,\n",
       " 0.00911379960537812,\n",
       " 0.0,\n",
       " 0.0012961940082590296,\n",
       " 0.0037567656849541316,\n",
       " 0.0029239002470853167]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#feature_importances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6fed9810",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('pcv',\n",
       " 'hrmo',\n",
       " 'rc',\n",
       " 'al',\n",
       " 'bu',\n",
       " 'sod',\n",
       " 'htn_yes',\n",
       " 'sc',\n",
       " 'bgr',\n",
       " 'age',\n",
       " 'sg_d',\n",
       " 'sg_c',\n",
       " 'dm_yes',\n",
       " 'pc_normal',\n",
       " 'pe_yes',\n",
       " 'wc',\n",
       " 'pot',\n",
       " 'ane_yes',\n",
       " 'bp',\n",
       " 'rbc_normal',\n",
       " 'appet_yes',\n",
       " 'pcc_present',\n",
       " 'sg_b',\n",
       " 'su',\n",
       " 'sg_e',\n",
       " 'ba_present',\n",
       " 'cad_yes')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#features_sorted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "77921892",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.32466419079274234,\n",
       " 0.17997590656820436,\n",
       " 0.12634883937934901,\n",
       " 0.08422140226242984,\n",
       " 0.05375645339964211,\n",
       " 0.03991830099538806,\n",
       " 0.03906111690683461,\n",
       " 0.038197236196475366,\n",
       " 0.02396897676710053,\n",
       " 0.02345613569480969,\n",
       " 0.01997970595763808,\n",
       " 0.01194996286463879,\n",
       " 0.00911379960537812,\n",
       " 0.004219886783939369,\n",
       " 0.0037567656849541316,\n",
       " 0.0035196268723462517,\n",
       " 0.003057605595234331,\n",
       " 0.0029239002470853167,\n",
       " 0.0026892262395733675,\n",
       " 0.0014527439425983406,\n",
       " 0.0012961940082590296,\n",
       " 0.0012572479116928802,\n",
       " 0.001214775323686215,\n",
       " 0.0,\n",
       " 0.0,\n",
       " 0.0,\n",
       " 0.0)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#importance_scores_sorted "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "087fbdd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting feature importance\n",
    "plt.bar(features_sorted, importance_scores_sorted)\n",
    "plt.xlabel('Features1')\n",
    "plt.ylabel('Importance Scores2')\n",
    "plt.title('Feature Importance in Predicting Housing Prices')\n",
    "\n",
    "# Rotate x-axis labels for better readability\n",
    "plt.xticks(rotation=45)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "fc83191b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.02345613569480969,\n",
       " 0.0026892262395733675,\n",
       " 0.08422140226242984,\n",
       " 0.0,\n",
       " 0.02396897676710053,\n",
       " 0.05375645339964211,\n",
       " 0.038197236196475366,\n",
       " 0.03991830099538806,\n",
       " 0.003057605595234331,\n",
       " 0.17997590656820436,\n",
       " 0.32466419079274234,\n",
       " 0.0035196268723462517,\n",
       " 0.12634883937934901,\n",
       " 0.001214775323686215,\n",
       " 0.01194996286463879,\n",
       " 0.01997970595763808,\n",
       " 0.0,\n",
       " 0.0014527439425983406,\n",
       " 0.004219886783939369,\n",
       " 0.0012572479116928802,\n",
       " 0.0,\n",
       " 0.03906111690683461,\n",
       " 0.00911379960537812,\n",
       " 0.0,\n",
       " 0.0012961940082590296,\n",
       " 0.0037567656849541316,\n",
       " 0.0029239002470853167]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#feature_importances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "6ce0fdf7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('pcv',\n",
       " 'hrmo',\n",
       " 'rc',\n",
       " 'al',\n",
       " 'bu',\n",
       " 'sod',\n",
       " 'htn_yes',\n",
       " 'sc',\n",
       " 'bgr',\n",
       " 'age',\n",
       " 'sg_d',\n",
       " 'sg_c',\n",
       " 'dm_yes',\n",
       " 'pc_normal',\n",
       " 'pe_yes',\n",
       " 'wc',\n",
       " 'pot',\n",
       " 'ane_yes',\n",
       " 'bp',\n",
       " 'rbc_normal',\n",
       " 'appet_yes',\n",
       " 'pcc_present',\n",
       " 'sg_b',\n",
       " 'su',\n",
       " 'sg_e',\n",
       " 'ba_present',\n",
       " 'cad_yes')"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#features_sorted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "06f6b614",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.32466419079274234,\n",
       " 0.17997590656820436,\n",
       " 0.12634883937934901,\n",
       " 0.08422140226242984,\n",
       " 0.05375645339964211,\n",
       " 0.03991830099538806,\n",
       " 0.03906111690683461,\n",
       " 0.038197236196475366,\n",
       " 0.02396897676710053,\n",
       " 0.02345613569480969,\n",
       " 0.01997970595763808,\n",
       " 0.01194996286463879,\n",
       " 0.00911379960537812,\n",
       " 0.004219886783939369,\n",
       " 0.0037567656849541316,\n",
       " 0.0035196268723462517,\n",
       " 0.003057605595234331,\n",
       " 0.0029239002470853167,\n",
       " 0.0026892262395733675,\n",
       " 0.0014527439425983406,\n",
       " 0.0012961940082590296,\n",
       " 0.0012572479116928802,\n",
       " 0.001214775323686215,\n",
       " 0.0,\n",
       " 0.0,\n",
       " 0.0,\n",
       " 0.0)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#importance_scores_sorted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "20e18379",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def random(X_train_scaled, y_train, threshold=0.1):\n",
    "    rf_model = RandomForestClassifier(n_estimators=10, max_depth=None, min_samples_split=2, random_state=0)\n",
    "    rf_model = rf_model.fit(X_train_scaled, y_train)\n",
    "    \n",
    "    # Get feature importances\n",
    "    feature_importances = list(rf_model.feature_importances_)\n",
    "    \n",
    "    # Create a sorted list of feature importances\n",
    "    feature_importances_sorted = sorted(zip(X_train_scaled.columns, feature_importances), key=lambda x: x[1], reverse=True)\n",
    "    \n",
    "    # Display feature importances\n",
    "    for feature, importance in feature_importances_sorted:\n",
    "        print(f'{feature}: {importance}')\n",
    "        \n",
    "    # Extract features and importance scores separately from the sorted list\n",
    "    features_sorted, importance_scores_sorted = zip(*feature_importances_sorted)\n",
    "    \n",
    "    # Select features based on the importance threshold\n",
    "    selected_features = [feature for feature, importance in feature_importances_sorted if importance > threshold]\n",
    "\n",
    "    print(\"\\nSelected features:\")\n",
    "    print(selected_features)\n",
    "\n",
    "    # Extract the selected features from the original data\n",
    "    selected_X_train = X_train_scaled[selected_features]\n",
    "    selected_X_test = X_test[selected_features]\n",
    "    \n",
    "    return feature_importances, features_sorted, importance_scores_sorted, selected_features, selected_X_train ,  selected_X_test\n",
    "\n",
    "# Example usage\n",
    "# Assuming you have X_train_scaled and y_train defined\n",
    "#result = random(X_train_scaled, y_train, threshold=0.1)\n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "90c69a5c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.02345613569480969,\n",
       " 0.0026892262395733675,\n",
       " 0.08422140226242984,\n",
       " 0.0,\n",
       " 0.02396897676710053,\n",
       " 0.05375645339964211,\n",
       " 0.038197236196475366,\n",
       " 0.03991830099538806,\n",
       " 0.003057605595234331,\n",
       " 0.17997590656820436,\n",
       " 0.32466419079274234,\n",
       " 0.0035196268723462517,\n",
       " 0.12634883937934901,\n",
       " 0.001214775323686215,\n",
       " 0.01194996286463879,\n",
       " 0.01997970595763808,\n",
       " 0.0,\n",
       " 0.0014527439425983406,\n",
       " 0.004219886783939369,\n",
       " 0.0012572479116928802,\n",
       " 0.0,\n",
       " 0.03906111690683461,\n",
       " 0.00911379960537812,\n",
       " 0.0,\n",
       " 0.0012961940082590296,\n",
       " 0.0037567656849541316,\n",
       " 0.0029239002470853167]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#feature_importances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "53932e3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('pcv',\n",
       " 'hrmo',\n",
       " 'rc',\n",
       " 'al',\n",
       " 'bu',\n",
       " 'sod',\n",
       " 'htn_yes',\n",
       " 'sc',\n",
       " 'bgr',\n",
       " 'age',\n",
       " 'sg_d',\n",
       " 'sg_c',\n",
       " 'dm_yes',\n",
       " 'pc_normal',\n",
       " 'pe_yes',\n",
       " 'wc',\n",
       " 'pot',\n",
       " 'ane_yes',\n",
       " 'bp',\n",
       " 'rbc_normal',\n",
       " 'appet_yes',\n",
       " 'pcc_present',\n",
       " 'sg_b',\n",
       " 'su',\n",
       " 'sg_e',\n",
       " 'ba_present',\n",
       " 'cad_yes')"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_sorted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "bafab26f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.32466419079274234,\n",
       " 0.17997590656820436,\n",
       " 0.12634883937934901,\n",
       " 0.08422140226242984,\n",
       " 0.05375645339964211,\n",
       " 0.03991830099538806,\n",
       " 0.03906111690683461,\n",
       " 0.038197236196475366,\n",
       " 0.02396897676710053,\n",
       " 0.02345613569480969,\n",
       " 0.01997970595763808,\n",
       " 0.01194996286463879,\n",
       " 0.00911379960537812,\n",
       " 0.004219886783939369,\n",
       " 0.0037567656849541316,\n",
       " 0.0035196268723462517,\n",
       " 0.003057605595234331,\n",
       " 0.0029239002470853167,\n",
       " 0.0026892262395733675,\n",
       " 0.0014527439425983406,\n",
       " 0.0012961940082590296,\n",
       " 0.0012572479116928802,\n",
       " 0.001214775323686215,\n",
       " 0.0,\n",
       " 0.0,\n",
       " 0.0,\n",
       " 0.0)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#importance_scores_sorted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7fea939c",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'selected_features' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_8636\\2771327759.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mselected_features\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'selected_features' is not defined"
     ]
    }
   ],
   "source": [
    "selected_features"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
